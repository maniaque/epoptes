#!/usr/bin/python3
# This file is part of Epoptes, https://epoptes.org
# Copyright 2010-2018 the Epoptes team, see AUTHORS.
# SPDX-License-Identifier: GPL-3.0-or-later
"""
Launch the epoptes UI.
"""
import getpass
import grp
import os
import os.path
import subprocess
import sys

import epoptes
from epoptes.common import config
from epoptes.core import logger
from epoptes.daemon import uiconnection
from epoptes.ui import gui
from epoptes.ui.common import gettext as _
from gi.repository import Gtk
from twisted.internet import reactor
from twisted.internet.protocol import ClientCreator


LOG = logger.Logger(__file__)


def connection_failed(failure):
    """Errback for gui <=> daemon connection."""
    msg = _("An error occurred while trying to connect to the epoptes service:")
    msg += ' <i>' + failure.getErrorMessage() + '</i>, error code ' + str(failure.value.osError) + '\n\n'
    LOG.c("Connection with epoptes failed:", failure.getErrorMessage())
    # TODO: some better explanation of statuses, when server is down
    dlg = Gtk.MessageDialog(type=Gtk.MessageType.ERROR,
                            buttons=Gtk.ButtonsType.OK)
    dlg.set_markup(msg)
    dlg.set_title(_('Service connection error'))
    dlg.run()
    dlg.destroy()
    # noinspection PyUnresolvedReferences
    reactor.stop()

def main():
    """Usage: epoptes [--version]."""
    if len(sys.argv) > 1:
        if sys.argv[1] in ('--version', '-version'):
            print("Epoptes %s" % epoptes.__version__)
            sys.exit(0)

    # cd to the epoptes directory, so that all paths are relative
    if not os.path.isfile('epoptes.ui'):
        os.chdir('/usr/share/epoptes')

    path = os.path.expanduser('~/.config')
    if not os.path.isdir(path):
        os.mkdir(path, 0x700)
    path = os.path.expanduser('~/.config/epoptes')
    if not os.path.isdir(path):
        os.mkdir(path)

    egui = gui.EpoptesGui()
    # noinspection PyUnresolvedReferences
    dfr = ClientCreator(reactor, uiconnection.Daemon, egui)\
        .connectTCP(config.system['GUI_SERVER'], int(config.system['GUI_PORT']))
    dfr.addErrback(connection_failed)
    # noinspection PyUnresolvedReferences
    reactor.run()


if __name__ == '__main__':
    main()
